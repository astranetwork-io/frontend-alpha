<?php

namespace Astra\SharedBundle\Repository;

use Astra\SharedBundle\Entity\ContactList;
use Astra\SharedBundle\Entity\User;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * ContactListRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContactListRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param array $users
     * @param bool $strong
     * @return ContactList[]
     */
    public function getForUserList(array $users, $strong = false)
    {
        $table = $this->getClassMetadata()->getTableName();
        $params = [];
        $sql =
            "
            SELECT
            ContactList.*
            FROM `$table` ContactList            
            ";

        $usersUnique = array_unique($users);
        foreach ($usersUnique as $user)
        {
            $id = $user->getId();
            $tableAliace = "contact{$id}";
            $sql.=
                "
                INNER JOIN `contact` {$tableAliace} ON {$tableAliace}.contact_list_id = ContactList.id AND {$tableAliace}.user_id = :{$tableAliace}
                ";
            $params[$tableAliace] = $id;
        }

        if($strong)
        {
            $sql.=
                "
                INNER JOIN (SELECT contact_list_id, count(*) AS num_contact FROM `contact` GROUP BY contact_list_id ) calc 
                ON calc.contact_list_id = ContactList.id AND calc.num_contact = :count 
            ";
            $params['count'] = count($users);
        }

        $em = $this->getEntityManager();
        $rsm = new ResultSetMappingBuilder($em);

        $rsm->addRootEntityFromClassMetadata('AstraSharedBundle:ContactList', 'ContactList');
        $query = $em->createNativeQuery($sql, $rsm);
        $query->setParameters($params);

        return $query->getResult();
    }
}
