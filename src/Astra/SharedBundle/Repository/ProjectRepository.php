<?php

namespace Astra\SharedBundle\Repository;

use Astra\SharedBundle\Entity\Project;
use Astra\SharedBundle\Entity\User;
use Astra\SharedBundle\Utils\SqlUtils;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends EntityRepository
{
    /**
     * @param User[] $users
     * @return Project[]
     */
    public function getProjectsForUsers($users)
    {
        $result = [];
        $userIds = [];
        $parameters = [];
        foreach ($users as $user)$userIds[$user->getId()] = $user->getId();

        if (empty($userIds)) return $result;

        $joinedHydrate = SqlUtils::generateFieldHydrate(['projectUsers'=>'AstraSharedBundle:ProjectUsers'], $this->_em);

        $sql =
            "
            SELECT
             project.*
            FROM {$this->_class->getTableName()} project
            INNER JOIN (SELECT DISTINCT project_id FROM {$joinedHydrate['tables']['projectUsers']} WHERE (user_id in (:users))) AllProjectId
            ON AllProjectId.project_id = project.id
            ";


        $parameters['users'] = $userIds;

        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addRootEntityFromClassMetadata($this->_class->name, 'project');
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameters($parameters);

        $result = $query->getResult();

        return $result;
    }
}
