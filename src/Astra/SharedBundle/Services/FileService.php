<?php
namespace Astra\SharedBundle\Services;

use Astra\SharedBundle\Entity\Directory;
use Astra\SharedBundle\Entity\File;
use Astra\SharedBundle\Entity\User;
use Doctrine\ORM\EntityManager;
use Symfony\Component\HttpFoundation\File\UploadedFile;

class FileService
{
    protected $allowTypes =
        [
            'txt',
            'doc',
            'docx',
            'xls',
            'xlsx',
            'csv',
            'pdf',
            'exe',
            'com',
            'bat',
            'zip',
            'rar',
            '7z',

            'jpg',
            'jpeg',
            'gif',
            'png',

            'mp3',
            'wav',
        ];
    private $entityManager;
    private $rootDirectory;
    private $publicFileDirectory;
    private $privateFileDirectory;

    public function __construct(EntityManager $entityManager, $rootDirectory, $publicFileDirectory, $privateFileDirectory)
    {
        $this->entityManager = $entityManager;
        $this->rootDirectory = $rootDirectory;
        $this->publicFileDirectory = $publicFileDirectory;
        $this->privateFileDirectory = $privateFileDirectory;
    }

    protected function getPublicFilePathName(User $user = null)
    {
        $ds = DIRECTORY_SEPARATOR;
        $rootDirectory = $this->rootDirectory;
        $startPath = "{$rootDirectory}{$ds}..{$ds}web{$ds}{$this->publicFileDirectory}{$ds}users";
        $userId = (empty($user) || empty($user->getId())) ? 0 : $user->getId();
        return $startPath.$ds.$userId.$ds.date('Ymd').$ds;
    }

    protected function getAssetFile($fileName,User $user = null)
    {
        $ds = '/';
        $startPath = "users";
        $userId = (empty($user) || empty($user->getId())) ? 0 : $user->getId();
        return $startPath.$ds.$userId.$ds.date('Ymd').$ds.$fileName;
    }

    protected function getPublicFilePath(User $user = null)
    {
        $pathName = $this->getPublicFilePathName($user);
        if (!is_dir($pathName)) @mkdir($pathName, 0664, true);
        if (!is_dir($pathName)) throw new \Exception('Dont create directory');
        return realpath($pathName).DIRECTORY_SEPARATOR;
    }

    /**
     * @param UploadedFile $uploadetFile
     * @param User|null $user
     * @param null $virtualDirectory
     * @return File
     */
    public function saveUploadetFile(UploadedFile $uploadetFile, User $user = null, $virtualDirectory = null, Directory $parent = null)
    {
        $directory = $this->getDirectoryByPath($virtualDirectory,$parent,$user);
        $path = $this->getPublicFilePath($user);
        $fileName = $this->generateUniqueFileName().'.'.$uploadetFile->guessExtension();
        $originalName = $uploadetFile->getClientOriginalName();
        $asset = $this->getAssetFile($fileName,$user);
        $uploadetFile->move($path,$fileName);

        $MIME = explode('/',$uploadetFile->getClientMimeType());

        $mimeType = array_shift($MIME);

        $fileEntity =  new File();
        $fileEntity
            ->setName($originalName)
            ->setType(empty($mimeType)?'':mb_strtolower($mimeType))
            ->setSubType(empty($MIME)?'':mb_strtolower(join('/',$MIME)))
            ->setUser($user)
            ->setAsset($asset)
            ->setDirectory($directory)
            ->setPhysicalDir($path)
            ->setPhysicalName($fileName);

        $this->entityManager->persist($fileEntity);
        $this->entityManager->flush($fileEntity);
        return $fileEntity;
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function getDirectoryByPath(string $path = null, Directory $parent = null, User $user = null, $createNew = true)
    {
        if(($parent)&&(!$parent->getId()))
        {
            $parent = null;
        }
        $resultDirectory = $parent;

        if (empty($path)) return $resultDirectory;
        $path = $this->normalizePathName($path);
        $arrayPath = explode('/',$path);

        foreach ($arrayPath as $name)
        {
            $resultDirectory = $this->getDirectoryByName($name,$resultDirectory,$user,$createNew);
            if (empty($resultDirectory)) return $resultDirectory;
        }

        return $resultDirectory;
    }

    private function getDirectoryByName(string $name, Directory $parent = null, User $user = null, $createNew = true)
    {
        $filter =
            [
                'name'=>$name,
                'parent'=>$parent,
                'user'=>$user,
            ];

        $directory = $this->entityManager->getRepository('AstraSharedBundle:Directory')->findOneBy($filter);
        if($directory) return $directory;
        if(!$createNew) return null;
        $directory = new Directory();
        $directory->setUser($user)->setParent($parent)->setName($name);
        $this->entityManager->persist($directory);
        $this->entityManager->flush($directory);
        return $directory;
    }

    public function checkExtensionUploadedFile(UploadedFile $uploadetFile)
    {
        $ext = mb_strtolower($uploadetFile->getClientOriginalExtension());
        return in_array($ext, $this->allowTypes);
    }

    public function normalizePathName($path)
    {
        $pathFull = trim(trim(str_replace('\\','/',$path),'/'));
        $pathArray = explode('/',$pathFull);
        $pathResultArray = [];
        foreach ($pathArray as $path)
        {
            $path = trim($path);
            if (mb_strlen($path)<1) continue;
            $pathResultArray[] = $path;

        }
        return join('/',$pathResultArray);
    }

}